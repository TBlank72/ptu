heroku urls given when:
  heroku create ptum
  https://ptum.herokuapp.com | https://git.heroku.com/ptum.git

to deploy:
  git push heroku master

ensure that at least one instance of the app is running:
  heroku ps:scale web=1

see the running app
  visit the url given above
  or
  heroku open

view logs
  heroku logs --tail
  Ctrl-C to stop streaming logs

Procfile (no extension) defines how to start the app and other stuff:
  web: node ./bin/www
  or something like
  web: node app.js

check how many dynos you're running
  heroku ps

scale to more or fewer dynos
  heroku ps:scale web=0 (will turn off app)
  heroku ps:scale web=1 (will turn on with 1 dyno)
*scaling non-free app beyond 1 will require account verification

package.json may need "engines" added
  "engines": {
    "node": "5.6.0"
  }
but it seems to work without it

run the app locally:
  heroku local web
doesn't check for changes.  runs the last version pushed to heroku I assume.

push new version to heroku deployment
  1. save changes locally
  2. git add . (or -A)
  3. git commit -m "message"
  4. git push heroku master
  5. heroku open (should have updates)

Provision add-ons
  heroku addons:create <addon_name>

See all add-ons
  heroku addons

See docs for add-on
  heroku addons:docs <addon_name>

Open add-on
  heroku addons:open <addon_name>

Access one-off dyno for additional commands
  heroku run <whatever you need>
  example:
  heroku run bash
  to get a bash cli to access remote file system
This may be used for setting up database

Define Config vars
  create a .env file with environment variables
  PORT=5000
  or
  heroku config:set PORT=5000
    from cli

List current config
  heroku config

Provision a MongoLab database
  heroku addons:create mongolab 
  heroku addons:docs mongolab (for documentation)
When you create the mLab add-on, the database connection URI is 
stored as a config variable.
You can access this in node.js with:

process.env.MONGOLAB_URI
example:
mongoose.connect(process.env.MONGOLAB_URI || mongodb://localhost/ptu)

and add the following to app.js:




Access DB:
  heroku pg:psql

See release history
  heroku releases
everytime a new deployment is completed, it is added to the 
release history.  You can easily rollback to a previous release:
  heroku releases:rollback v102
will rollback to version 102
Making any material change results in a new release, whether it's
a change in source code or configuration.





